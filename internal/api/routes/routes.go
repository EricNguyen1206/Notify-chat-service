package routes

import (
	"chat-service/internal/api/handlers"
	"chat-service/internal/api/middleware"
	"chat-service/internal/config"
	"chat-service/internal/repositories/postgres"
	"chat-service/internal/services"
	"log"

	_ "chat-service/docs" // This is generated by swag

	"github.com/gin-gonic/gin"
	"github.com/gorilla/websocket"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"gorm.io/gorm"
)

// @title Chat Service API
// @version 1.0
// @description A real-time chat service API with WebSocket support for instant messaging, user management, friend system, and channel management.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

type App struct {
	router     *gin.Engine
	postgresDB *gorm.DB
	WSUpgrader websocket.Upgrader
}

func NewApp() (*App, error) {
	config, _ := config.LoadConfig()

	// Repository
	userRepo := postgres.NewUserRepository(config.DB)
	channelRepo := postgres.NewChannelRepository(config.DB)

	// Service
	userService := services.NewUserService(userRepo, config.JWTSecret, config.Redis)
	channelService := services.NewChannelService(channelRepo, userRepo)

	// Handler
	userHandler := handlers.NewUserHandler(userService, config.Redis)
	channelHandler := handlers.NewChannelHandler(channelService)

	wsHandler := handlers.NewWSHandler(config.WSHub)

	// Setup router
	router := gin.Default()

	// Add middlewares
	router.Use(middleware.CORS())
	router.Use(middleware.LogApi())

	router.GET("/kaithhealthcheck", healthCheck)

	// Register API routes
	api := router.Group("/api")
	{
		// Health check endpoint
		// WebSocket routes
		wsHandler.RegisterRoutes(api)
		userHandler.RegisterRoutes(api)
		channelHandler.RegisterRoutes(api)
	}

	// Swagger documentation
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	return &App{
		router:     router,
		postgresDB: config.DB,
		WSUpgrader: config.WSUpgrader,
	}, nil
}

// healthCheck godoc
// @Summary Health check
// @Description Check if the API is running
// @Tags health
// @Accept json
// @Produce json
// @Success 200 {object} map[string]string "API is healthy"
// @Router /health [get]
func healthCheck(c *gin.Context) {
	c.JSON(200, gin.H{
		"status": "UP",
	})
}

func (a *App) Run() error {
	log.Printf("Starting server on port 8080...")
	log.Printf("Swagger UI available at: http://localhost:8080/swagger/index.html")
	return a.router.Run(":8080")
}
